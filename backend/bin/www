#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
サンプル

var io = require('socket.io')(server, 
  {
    cors: {
    origin: "http://localhost:8080", //localhost:8080を許可する
    methods: ["GET", "POST"],
    allowedHeaders: ["my-custom-header"],
    credentials: true
  }
});
io.sockets.on('connection', function (socket) {

  console.log('a user connected');

  socket.on('SEND_MESSAGE', function(msg){
    console.log('message:' + msg);
  });
})
*/

/**
 * ADDED!! Socket.IO Connection.
 */

const mongodb = require("mongodb");
const MongoClient = mongodb.MongoClient;
const config = require("../config/mongodb.config.js");

var io = require('socket.io')(server, 
  {
    cors: {
    origin: "http://localhost:8080", //localhost:8080を許可する
    methods: ["GET", "POST"],
    allowedHeaders: ["my-custom-header"],
    credentials: true
  }
});

 io.on('connection', function (socket) {
   // フロント側からチャットが投下された時に発火するイベント
   socket.on('SEND_MESSAGE', function (data) {
   console.log("SEND_MESSAGE処理")
 
     // コネクションの用意
     MongoClient.connect(config.CONNECTION_URL, null, (error, client) => {
      const db = client.db(config.DATABASE)

      Promise.all([])
      .then(
        db.collection("chat_histories").insertOne({
          history_index: 1,
          user_id: data.user_id,
          message: data.message,
          date_time: data.date_time
         })       
         .then( results => console.log(`INSERT成功：${results.insertedId}`))
         .catch(error => console.log(`INSERT失敗：${error}`))
      )
      .then(
        db.collection("chat_histories")
        .find()
        .toArray()
        .then(result => io.emit('MESSAGE', result)) 
      )

       
 
      }
   );
 }
 )
}
);

 